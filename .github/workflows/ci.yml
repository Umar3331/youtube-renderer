name: Import & Deploy

on:
  push:
    branches: [ main ]

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      ecr_uri: ${{ steps.get_ecr.outputs.registry }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      #───────────────────────────────────────────────────────────────────#
      # IMPORT EXISTING RESOURCES (pass dummy for the two file vars)    #
      #───────────────────────────────────────────────────────────────────#

      - name: Import S3 bucket
        run: |
          terraform import \
            -var="account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
            -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
            -var="youtube_client_id=${{ secrets.YOUTUBE_CLIENT_ID }}" \
            -var="youtube_client_secret=${{ secrets.YOUTUBE_CLIENT_SECRET }}" \
            -var="youtube_refresh_token=${{ secrets.YOUTUBE_REFRESH_TOKEN }}" \
            -var="youtube_creds_file=IGNORE" \
            -var="lambda_zip_path=IGNORE" \
            aws_s3_bucket.videos \
            my-daily-videos-bucket-2025-umar

      - name: Import ECR repository
        run: |
          terraform import \
            -var="account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
            -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
            -var="youtube_client_id=${{ secrets.YOUTUBE_CLIENT_ID }}" \
            -var="youtube_client_secret=${{ secrets.YOUTUBE_CLIENT_SECRET }}" \
            -var="youtube_refresh_token=${{ secrets.YOUTUBE_REFRESH_TOKEN }}" \
            -var="youtube_creds_file=IGNORE" \
            -var="lambda_zip_path=IGNORE" \
            aws_ecr_repository.renderer \
            daily-video-renderer

      - name: Import OpenAI secret
        run: |
          terraform import \
            -var="account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
            -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
            -var="youtube_client_id=${{ secrets.YOUTUBE_CLIENT_ID }}" \
            -var="youtube_client_secret=${{ secrets.YOUTUBE_CLIENT_SECRET }}" \
            -var="youtube_refresh_token=${{ secrets.YOUTUBE_REFRESH_TOKEN }}" \
            -var="youtube_creds_file=IGNORE" \
            -var="lambda_zip_path=IGNORE" \
            aws_secretsmanager_secret.openai \
            openai/daily-video-renderer

      - name: Import YouTube secret
        run: |
          terraform import \
            -var="account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
            -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
            -var="youtube_client_id=${{ secrets.YOUTUBE_CLIENT_ID }}" \
            -var="youtube_client_secret=${{ secrets.YOUTUBE_CLIENT_SECRET }}" \
            -var="youtube_refresh_token=${{ secrets.YOUTUBE_REFRESH_TOKEN }}" \
            -var="youtube_creds_file=IGNORE" \
            -var="lambda_zip_path=IGNORE" \
            aws_secretsmanager_secret.youtube \
            prod/YouTubeUploader/credentials

      - name: Import IAM roles & log group
        run: |
          # ecs_task, ecs_exec, lambda roles
          for r in ecs_task ecs_exec lambda; do
            arn=$(aws iam get-role --role-name ${r == "lambda" ? "youtube-uploader-lambda-role" : (r == "ecs_exec" ? "ecsTaskExecutionRole" : "ecs-render-task-role")} \
                 --query "Role.Arn" --output text)
            terraform import \
              -var="account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
              -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
              -var="youtube_client_id=${{ secrets.YOUTUBE_CLIENT_ID }}" \
              -var="youtube_client_secret=${{ secrets.YOUTUBE_CLIENT_SECRET }}" \
              -var="youtube_refresh_token=${{ secrets.YOUTUBE_REFRESH_TOKEN }}" \
              -var="youtube_creds_file=IGNORE" \
              -var="lambda_zip_path=IGNORE" \
              aws_iam_role.${r} $arn
          done

          # CloudWatch log group
          terraform import \
            -var="account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
            -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
            -var="youtube_client_id=${{ secrets.YOUTUBE_CLIENT_ID }}" \
            -var="youtube_client_secret=${{ secrets.YOUTUBE_CLIENT_SECRET }}" \
            -var="youtube_refresh_token=${{ secrets.YOUTUBE_REFRESH_TOKEN }}" \
            -var="youtube_creds_file=IGNORE" \
            -var="lambda_zip_path=IGNORE" \
            aws_cloudwatch_log_group.ecs /ecs/daily-video-renderer

      #───────────────────────────────────────────────────────────────────#
      # PACKAGE & APPLY                                                 #
      #───────────────────────────────────────────────────────────────────#

      - name: Package Lambda
        run: zip youtube-uploader-deployment.zip lambda_function.py

      - name: Terraform Apply
        id: tf_apply
        run: |
          terraform apply -auto-approve \
            -var="account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
            -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
            -var="youtube_client_id=${{ secrets.YOUTUBE_CLIENT_ID }}" \
            -var="youtube_client_secret=${{ secrets.YOUTUBE_CLIENT_SECRET }}" \
            -var="youtube_refresh_token=${{ secrets.YOUTUBE_REFRESH_TOKEN }}" \
            -var="youtube_creds_file=youtube-creds.json" \
            -var="lambda_zip_path=youtube-uploader-deployment.zip"

      - name: Get ECR URI
        id: get_ecr
        run: |
          echo "registry=$(aws ecr describe-repositories \
            --repository-names daily-video-renderer \
            --query 'repositories[0].repositoryUri' \
            --output text)" >> $GITHUB_OUTPUT

  docker:
    name: Build & Push Docker
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password \
            --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ needs.terraform.outputs.ecr_uri }}

      - name: Build Image
        run: docker build -t ${{ needs.terraform.outputs.ecr_uri }}:latest .

      - name: Push Image
        run: docker push ${{ needs.terraform.outputs.ecr_uri }}:latest